<?xml version="1.0"?>
<package>
  <name>robot_state</name>
  <version>0.1.0</version>
  <description>
    The robot_state package is intended to be used along with the explorer and the energy_mgmt packages. The robot_state package can be used to keep track of the state of the robot, that is needed by the explorer and energy_mgmt packages, in a centralized fashion: in this way, the other two packages do not need update their local information about the robot state according to some information received by nodes that are not the robot_state node, since it is enough to ask robot_state about the current robot state to be able to take decisions.
    The robot_state package provides four main services. The first service simply allows a node that call this service to get the current robot state.
    The second service is used to update: when one of the other nodes notice that a state update is necessary, this node will notify the robot_state node about the new state of the robot. This is done to reduce the information that the other nodes have to constantly send information to robot_state node to let it be able to update the robot state accordingly.
    The third service and four services are intended to be used by a node that wants to lock the access to the current state from other nodes: since in fact it is possible that wh8ile a certain node is checking if, according to the information possesed by it, a state update is in order, another node could try to get from robot_state node the current robot state, and then act accordingly, causing this node to take decision using information that may change in the immediate future (i.e., the node that got the robot state received information that will be not up-to-date very soon). Using the third service, when a node wants to check for a possible update of the state, it can lock the access to the current state: in particular, when a node will try to call the first service, this first service will not return a response until the the lock is not released. This is done by calling the fourth service.
  </description>

  <!-- One maintainer tag required, multiple allowed, one person per tag -->
  <maintainer email="fabrizio1.casati@mail.polimi.it">Fabrizio Casati</maintainer>

  <!-- One license tag required, multiple allowed, one license per tag -->
  <!-- Commonly used license strings: -->
  <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->
  <license>BSD</license>

  <!-- Url tags are optional, but mutiple are allowed, one per tag -->
  <!-- Optional attribute type can be: website, bugtracker, or repository -->
  <url type="website">http://wiki.ros.org/robot_state</url>

  <!-- Author tags are optional, mutiple are allowed, one per tag -->
  <!-- Authors do not have to be maintianers, but could be -->
  <author email="fabrizio1.casati@mail.polimi.it">Fabrizio Casati</author>

  <!-- The *_depend tags are used to specify dependencies -->
  <!-- Dependencies can be catkin packages or system dependencies -->
  <!-- Examples: -->
  <!-- Use build_depend for packages you need at compile time: -->
  <!--   <build_depend>message_generation</build_depend> -->
  <!-- Use buildtool_depend for build tool packages: -->
  <!--   <buildtool_depend>catkin</buildtool_depend> -->
  <!-- Use run_depend for packages you need at runtime: -->
  <!--   <run_depend>message_runtime</run_depend> -->
  <!-- Use test_depend for packages you need only for testing: -->
  <!--   <test_depend>gtest</test_depend> -->
  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>rospy</build_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>message_generation</build_depend>

  <run_depend>rospy</run_depend>
  <run_depend>roscpp</run_depend>
  <run_depend>std_msgs</run_depend>
  <run_depend>message_runtime</run_depend>

  <!-- The export tag contains other, unspecified, tags -->
  <export>
    <!-- You can specify that this package is a metapackage here: -->
    <!-- <metapackage/> -->

    <!-- Other tools can request additional information be placed here -->

  </export>
</package>
